{"version":3,"sources":["components/Jumbotron.js","utils/API.js","components/TableContainer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","React","Component","getEmployees","query","axios","get","TableContainer","state","employees","employeesInfo","loadEmployees","then","response","data","results","setState","a","buildData","isLoading","catch","err","console","log","map","employee","employeePicture","src","picture","medium","alt","first","name","last","phoneNumber","phone","email","this","columns","label","field","width","rows","entries","hover","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sQAgBeA,E,uKAXP,OACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,oBAAd,uBACA,uBAAGA,UAAU,yBAAb,sE,GANIC,IAAMC,W,iBCCf,SAASC,EAAaC,GACjC,OAAOC,IAAMC,IAHD,iD,YC6FDC,E,4MAxFbC,MAAQ,CACNC,UAAW,GACXC,cAAe,I,EAQnBC,cAAgB,iBAAM,CACpBR,IACGS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,WAC/BH,MAAK,SAAAE,GACJ,EAAKE,SAAS,CAAEP,UAAWK,OAC1BF,KAJL,sBAIU,sBAAAK,EAAA,sDACN,EAAKD,SAAS,CAAEN,cAAe,EAAKQ,YAAaC,WAAW,IADtD,4CAELC,OAAM,SAACC,GACRC,QAAQC,IAAIF,Q,EAIhBH,UAAY,WAeV,OAdgB,EAAKV,MAAMC,UAAUe,KAAI,SAACC,GACxC,MACE,CACEC,gBAAiB,yBACjBC,IAAKF,EAASG,QAAQC,OACtBC,IAAI,aAEJC,MAAON,EAASO,KAAKD,MACrBE,KAAMR,EAASO,KAAKC,KACpBC,YAAaT,EAASU,MACtBC,MAAOX,EAASW,W,kEA3BtBC,KAAK1B,kB,+BAmCL,IAAMG,EAAO,CACXwB,QAAS,CACP,CACEC,MAAO,mBACPC,MAAO,kBACPC,MAAO,KAET,CACEF,MAAO,aACPC,MAAO,QACPC,MAAO,KAET,CACEF,MAAO,YACPC,MAAO,OACPC,MAAO,KAET,CACEF,MAAO,eACPC,MAAO,cACPC,MAAO,KAET,CACEF,MAAO,QACPC,MAAO,QACPC,MAAO,MAIXC,KAAML,KAAK7B,MAAME,eAGnB,OACE,6BACA,kBAAC,EAAD,MACA,6BAASV,UAAU,aACjB,kBAAC,IAAD,CACA2C,QAAS,GACTC,OAAK,EACL9B,KAAMA,U,GAjFeb,IAAMC,WCSpB2C,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCEcC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAyC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.b64d1beb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nclass Jumbotron extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid\">\r\n                <div className=\"container-fluid\">\r\n                    <h1 className=\"text text-center\"> Employee Directory</h1>\r\n                    <p className=\"text lead text-center\">Search for Employee or filter through by clicking on heading</p>\r\n                </div>\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default Jumbotron;","import axios from \"axios\";\r\n\r\nconst BASEURL = \"https://randomuser.me/api/?results=100&nat=us\";\r\n\r\nexport default function getEmployees(query) {\r\n    return axios.get(BASEURL);\r\n};\r\n\r\n","import React from \"react\";\r\nimport Jumbotron from \"./Jumbotron\";\r\nimport getEmployees from \"../utils/API\";\r\nimport { MDBDataTable } from 'mdbreact';\r\n\r\n\r\nclass TableContainer extends React.Component {\r\n  state = {\r\n    employees: [],\r\n    employeesInfo: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadEmployees();\r\n  }\r\n\r\n\r\nloadEmployees = () => [\r\n  getEmployees()\r\n    .then(response => response.data.results)\r\n    .then(data => {\r\n      this.setState({ employees: data })\r\n    }).then(async () => {\r\n      this.setState({ employeesInfo: this.buildData(), isLoading: false })\r\n    }).catch((err) => {\r\n      console.log(err);\r\n    })\r\n  ];\r\n\r\n  buildData = () => {\r\n    let employees = this.state.employees.map((employee) => {\r\n      return (\r\n        {\r\n          employeePicture: <img\r\n          src={employee.picture.medium}\r\n          alt='employee'\r\n          />,\r\n          first: employee.name.first,\r\n          last: employee.name.last,\r\n          phoneNumber: employee.phone,\r\n          email: employee.email\r\n        }\r\n      )\r\n    });\r\n    return employees;\r\n  }\r\n\r\nrender() {\r\n    const data = {\r\n      columns: [\r\n        {\r\n          label: 'Employee Picture',\r\n          field: 'employeePicture',\r\n          width: 150\r\n        },\r\n        {\r\n          label: 'First Name',\r\n          field: 'first',\r\n          width: 250\r\n        },\r\n        {\r\n          label: 'Last Name',\r\n          field: 'last',\r\n          width: 150\r\n        },\r\n        {\r\n          label: 'Phone Number',\r\n          field: 'phoneNumber',\r\n          width: 300\r\n        },\r\n        {\r\n          label: 'Email',\r\n          field: 'email',\r\n          width: 150\r\n        }\r\n\r\n      ],\r\n      rows: this.state.employeesInfo\r\n    };\r\n\r\n    return (\r\n      <div>\r\n      <Jumbotron />\r\n      <section className=\"container\">\r\n        <MDBDataTable\r\n        entries={10}\r\n        hover\r\n        data={data}\r\n        />\r\n      </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableContainer;","import '@fortawesome/fontawesome-free/css/all.min.css'; import\n'bootstrap-css-only/css/bootstrap.min.css'; import\n'mdbreact/dist/css/mdb.css';\nimport React from \"react\";\nimport './App.css';\nimport TableContainer from \"./components/TableContainer\"\n\nfunction App() {\n  return (\n    <div>\n      <TableContainer/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}